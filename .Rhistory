plot(r2[[1]][], r2[[2]][], xlab = "x", ylab = "y", col = "red")
df <- expand.grid(a = seq(0, 1, 0.1),)
df <- expand.grid(a = seq(0, 1, 0.1),)
df <- expand.grid(a = seq(0, 1, 0.1),
b = seq(0, 1, 0.1),
c = seq(0, 1, 0.1),
d = seq(0, 1, 0.1), e = seq(0, 1, 0.1), f = seq(0, 1, 0.1), g = seq(0, 1, 0.1))
dim(df)
gc()
gc(reset = T)
rm(df)
gc(reset = T)
x <- rnorm(100)
y <- x + rnorm(100, 0, 0.1)
plot(x, y, col = "red")
x <- rnorm(100)
y <- x + rnorm(100, 0, 0.2)
plot(x, y, col = "red")
y <- rnorm(100)
plot(x, y, col = "red")
df <- data.frame(x = x, y = y)
knitr::kable(head(df), caption = "Primeras seis filas de tabla que contiene *X* y *Y*.")
mean(df$x)
mean(df$y)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, 0, 0.2)
plot(x, y, col = "red")
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -10, sd = 0.2)
plot(x, y, col = "red")
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 0.2)
plot(x, y, col = "red")
y <- rnorm(100, mean = 10, sd = 1)
plot(x, y, col = "red")
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 0.2)
plot(x, y, col = "red")
y <- rnorm(100, mean = 10, sd = 1)
plot(x, y, col = "red")
mean(x)
mean(y)
hist(x)
hist(x-mean(x), xlab = expression(X^*))
hist(x)
hist(x-mean(x), xlab = expression(X^"*"))
par(mfrow = c(1, 2))
hist(x, main = "Histograma de X", ylab = "Frecuencia")
hist(x-mean(x), xlab = expression(X^"*"), main = "Histograma de X*", ylab = "Frecuencia")
par(mfrow = c(1, 2))
hist(x, main = "Histograma de X", xlab = "X", ylab = "Frecuencia")
hist(x-mean(x), xlab = expression(X^"*"), main = "Histograma de X*", ylab = "Frecuencia")
head(df)
df <- data.frame(x = x, y = y)
knitr::kable(head(df), caption = "Primeras seis filas de tabla que contiene *X* y *Y*.")
df.1 <- df
df.1$x <- df$x - mean(df$x)
df.1$y <- df$y - mean(df$y)
head(df.1)
df.1$x * df.1$y
6.77684257^2
-0.553122789^2
0.279012587^2
sum(df.1$x^2)
sum(df.1$y^2)
sum(df.1$x^2)/99
sum(df.1$y^2)/99
sqrt(sum(df.1$x^2)/99)
1.98778^2
sqrt(sum(df.1$y^2)/99)
mean(df.1$x*df.1$y)
sqrt(sum(df.1$x^2)/99) * sqrt(sum(df.1$y^2)/99)
mean(df.1$x*df.1$y)/sqrt(sum(df.1$x^2)/99) * sqrt(sum(df.1$y^2)/99)
cor.test(df$x, df$y)
cor.test(x, y)
library(raster)
getwd()
r <- raster("Datos-ejemplos/Var-1.tif")
plot(r)
plot(r)
plot(r)
plot(r)
plot(r)
dev.off()
plot(r)
list.files("Datos-ejemplos", "tif", full.names = T)
r <- stack(list.files("Datos-ejemplos", "tif", full.names = T))
plot(r)
pairs(r)
knitr::opts_chunk$set(dev = 'pdf')
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 0.2)
plot(x, y, col = "red")
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 0.5)
plot(x, y, col = "red")
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 1)
plot(x, y, col = "red")
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 1)
df.1 <- data.frame(x = x, y = y)
library(ggplot2)
ggplot(df.1) + geom_point(aes(x = x, y = y), colour = "red") +
stat_ellipse(level = 0.95) + theme_classic()
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 1)
df.1 <- data.frame(x = x, y = y)
library(ggplot2)
ggplot(df.1, aes(x = x, y = y)) + geom_point(colour = "red") +
stat_ellipse(level = 0.95) + theme_classic()
df.1$x1 <- rnorm(rnorm(100, mean = 10, sd = 4))
ggplot(df.1, aes (x = x1, y = y)) + geom_point(colour = "red") +
stat_ellipse(level = 0.95)
df.1$x1 <- rnorm(rnorm(100, mean = 10, sd = 4))
ggplot(df.1, aes (x = x1, y = y)) + geom_point(colour = "red") +
stat_ellipse(level = 0.95) + theme_classic()
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 1)
df.1 <- data.frame(x = x, y = y)
library(ggplot2)
ggplot(df.1, aes(x = x, y = y)) + geom_point(colour = "red") +
geom_smooth(method = "lm") + theme_classic()
set.seed(878)
x <- rnorm(100, mean = 10, sd = 2)
y <- x + rnorm(100, mean = -5, sd = 1)
df.1 <- data.frame(x = x, y = y)
library(ggplot2)
ggplot(df.1, aes(x = x, y = y)) + geom_point(colour = "red") +
geom_smooth(method = "lm", colour = "black", alpha = 0.5) +
theme_classic()
df.1$x1 <- rnorm(rnorm(100, mean = 10, sd = 4))
ggplot(df.1, aes (x = x1, y = y)) + geom_point(colour = "red") +
geom_smooth(method = "lm", colour = "black", alpha = 0.5) + theme_classic()
knitr::include_graphics("La-recta.png")
reg.lin <- lm(x ~ y, data = df.1)
summary(reg.lin)
reg.lin <- lm(y ~ x, data = df.1)
summary(reg.lin)
reg.lin1 <- lm(y ~ x1, data = df.1)
summary(reg.lin1)
set.seed(19873)
puntos <- coordinates(r)
library(raster)
r <- raster("../Datos-ejemplos/Var-1.tif")
#Para varias capas alineadas
r <- stack(list.files("../Datos-ejemplos/",
"tif", full.names = T))
set.seed(19873)
puntos <- coordinates(r)
puntos <- puntos[sample(1:nrow(puntos), 100),]
puntos <- data.frame(puntos)
puntos$x <- puntos$x + runif(100, -0.1, 0.1)
puntos$y <- puntos$y + runif(100, -0.1, 0.1)
var <- extract(r[[2]], puntos)
puntos$mediciones <- var * rnorm(1, 2, 0.1) + rnorm(100, -150, 20)
puntos <- na.omit(puntos)
knitr::kable(head(puntos), caption = "Primeras seis filas de una base de datos de mediciones colectadas en campo.")
plot(r[[1]])
points(puntos[, c("x", "y")], cex = puntos$mediciones/50)
names(puntos)
head(puntos)
valores.capas <- extract(r, puntos[, c("x", "y")])
puntos <- data.frame(puntos, valores.capas)
valores.capas <- extract(r, puntos[, c("x", "y")])
head(puntos)
summary(m1)
m1 <- lm(mediciones ~ Var.2, puntos)
summary(m1)
val.nuevos <- data.frame(rasterToPoints(r))
preds <- predict(m1, val.nuevos)
val.nuevos <- data.frame(rasterToPoints(r))
preds <- predict(m1, val.nuevos)
preds.r <- rasterFromXYZ(data.frame(val.nuevos[, c("x", "y")], preds))
plot(pred.r)
plot(preds.r)
m2 <- lm(mediciones ~ Var.1, puntos)
m3 <- lm(mediciones ~ Var.3, puntos)
AIC(m1)
AIC(m2)
AIC(m3)
library(raster)
library(raster)
r <- raster("../Datos-ejemplos/Var-1.tif")
Moran(r)
set.seed(5934857)
r1 <- r
r1[] <- runif(ncell(r))
Moran(r1)
class(r1)
datos$reg
datos <- read.csv("../Datos-ejemplos/Datos-puntos-Moran.csv")
datos$reg <- with(datos, (Mediciones - min(Mediciones))/(max(Mediciones) - min(Mediciones)) + 0.2)
with(datos, plot(Longitud, Latitud, cex = reg))
datos$reg
library(spdep)
vecindad <- dnearneigh(x = as.matrix(datos[, c("Longitud", "Latitud")]), d1 = 0, d2 = 75, longlat = T)
vec.listw <- nb2listw(vecindad)
S0 <- sum(nb2mat(vecindad))
I.puntos <- moran.test(x = datos$Mediciones, listw = vec.listw)
I.puntos
I.puntos
datos <- read.csv("../Datos-ejemplos/Datos-puntos-Moran-2.csv")
with(datos, plot(Longitud, Latitud, cex = Mediciones/5))
with(datos, plot(Longitud, Latitud, cex = Mediciones/5))
library(spdep)
vecindad <- dnearneigh(x = as.matrix(datos[, c("Longitud", "Latitud")]), d1 = 0, d2 = 75, longlat = T)
vec.listw <- nb2listw(vecindad)
S0 <- sum(nb2mat(vecindad))
I.meds <- moran.test(x = datos$Mediciones, listw = vec.listw)
I.meds
library(raster)
r <- stack(paste0("../Datos-ejemplos/Var-", c(1, 2), ".tif"))
paste0("../Datos-ejemplos/Var-", c(1, 2), ".tif")
library(raster)
r <- stack(paste0("../Datos-ejemplos/Var-", c(1, 2), ".tif"))
plot(r)
r.extract <- data.frame(extract(r, datos[, c("Longitud", "Latitud")]))
datos <- data.frame(datos, r.extract)
knitr::kable(head(datos))
modelo.1 <- lm(Mediciones ~ Var.2, data = datos)
summary(modelo.1)
datos$Residuales <-  residuals(modelo.1)
with(datos, plot(Longitud, Latitud, cex = Residuales))
with(datos, plot(Longitud, Latitud, cex = Residuales))
I.res <- moran.test(x = datos$Residuales, listw = vec.listw)
I.res
getwd()
library(raster)
puntos <- read.csv("Datos-ejemplos/Datos-puntos-Moran.csv")
head(puntos)
with(puntos, plot(Longitud, Latitud, cex = Mediciones/10))
vo <- dismo::voronoi(puntos)
plot(vo)
vo$id
vo$Mediciones <- puntos$Mediciones
head(vo)
vo <- dismo::voronoi(puntos)
head(vo)
vo$Mediciones <- puntos$Mediciones
r <- raster("Datos-ejemplos/Var-1.tif")
?rasterize
r.vo <- rasterize(vo, r)
r.vo <- rasterize(vo, r, field = "Mediciones")
plot(r.vo)
r.vo <- rasterize(y = r, x = vo, field = "Mediciones")
plot(r.vo)
m1 <- lm(Mediciones ~ Latitud + Longitud, data = puntos)
plot(m1)
summary(m1)
nuevos <- data.frame(coordinates(r))
head(nuevos)
#Cambiar nombres de columnas
names(nuevos) <- c("Longitud", "Latitud")
predic <- predict(m1, newdata = nuevos)
nuevos$Prediccion <- predic
pred.r <- rasterFromXYZ(nuevos)
plot(pred.r)
library(dismo); library(raster); library(rgdal)
puntos <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
puntos
system.file(package="dismo")
brad.p <- read.csv(brad.f)
brad.f <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
brad.p <- read.csv(brad.f)
head(brad.p)
files <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''), pattern='grd', full.names=TRUE )
files
capas.r <- stack(capas.f)
library(dismo); library(raster); library(rgdal)
brad.f <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
brad.p <- read.csv(brad.f)
capas.f <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''), pattern='grd', full.names=TRUE )
capas.r <- stack(capas.f)
plot(capas.r)
plot(capas.r[[1]]), points(brad.p$lon, brad.p$lat)
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
coordinates(brad.sp) <- ~ lon+lat
brad.sp <- brad.p
coordinates(brad.sp) <- ~ lon+lat
crs(brad.sp) <- crs(wrld_simpl)
install.packages("maptools")
library(dismo); library(raster); library(rgdal); library(maptools)
data("wrld_simpl")
crs(brad.sp) <- crs(wrld_simpl)
data("wrld_simpl"); plot(wrld_simpl)
crs(brad.sp) <- crs(wrld_simpl)
ov <- over(brad.sp, wrld_simpl)
ov
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
plot(buf, add = T)
buf <- rgeos::gBuffer(brad.sp, byid = T, width = 5)
plot(buf, add = T)
buf <- rgeos::gBuffer(brad.sp, byid = F, width = 5)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
plot(buf, add = T)
buf <- rgeos::gBuffer(brad.sp, byid = F, width = 10)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
plot(buf, add = T)
capas.rm <- mask(capas.r, buf)
plot(capas.rm[[1]])
capas.rm <- crop(mask(capas.r, buf), extent(buf))
plot(capas.rm[[1]])
points(brad)
points(brad.sp)
pairs(brad.sp)
pairs(capas.rm)
warnings()
density(brad.sp)
library(MASS)
ncell(capas.rm[[1]])
kde2d(brad.p$lon, brad.p$lat, n = 14720)
dim(capas.rm)
dim(capas.rm[[1]])
dens <- kde2d(brad.p$lon, brad.p$lat, n = 14720)
dens.r <- matrix(dens, ncol = 128, nrow = 115, byrow = T)
class(dens)
dens[[1]]
dens[[2]]
dens.r <- matrix(dens$z, ncol = 128, nrow = 115, byrow = T)
dens.df <- data.frame(x = dens$x, y = dens$y, dens = dens$z)
dens.r <- rasterFromXYZ(dens.df)
range(dens$z)
gc(reset = T)
library(dismo); library(raster); library(rgdal); library(maptools)
brad.f <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
brad.p <- read.csv(brad.f)
brad.sp <- brad.p
coordinates(brad.sp) <- ~ lon+lat
data("wrld_simpl"); plot(wrld_simpl)
crs(brad.sp) <- crs(wrld_simpl)
capas.f <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''), pattern='grd', full.names=TRUE )
capas.r <- stack(capas.f)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
buf <- rgeos::gBuffer(brad.sp, byid = F, width = 10)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
plot(buf, add = T)
capas.rm <- crop(mask(capas.r, buf), extent(buf))
plot(capas.rm[[1]])
points(brad.sp)
pairs(capas.rm)
png("Tutorial-SDM/Pares.png", width = 3000, height = 3000)
pairs(capas.rm)
dev.off()
library(spatstat)
pres.r <- rasterize(brad.sp, capas.rm[[1]], fun = "count")
plot(pres.r)
pres.r[is.na(pres.r[])] <- 0
pres.r[[1]][is.na(pres.r[])] <- 0
pres.r[[1]][is.na(pres.r[[1]][])] <- 0
pres.r <- mask(pres.r[[1]], capas.rm[[1]])
plot(pres.r)
capas.rm <- addLayer(capas.rm, pres.r)
capas.df <- data.frame(rasterToPoints(capas.rm))
names(capas.df)
wt <- 1.0E-6
pesos <- capas.df$ID
wt <- rep(1.0E-6, nrow(capas.df))
wt
capas.df$ID == 0
wt[capas.df$ID == 0] = length(wt)/sum(capas.df$ID == 0)
wt
modelo <- step(glm(pres.r/wt ~ bio1 + bio6 + bio12 + I(bio1^2) + I(bio6^2) + I(bio12^2),
data = capas.df, weights = p.wt,
family = poisson()))
modelo <- step(glm(pres.r/wt ~ bio1 + bio6 + bio12 + I(bio1^2) + I(bio6^2) + I(bio12^2),
data = capas.df, weights = wt,
family = poisson()))
length(wt)
nrow(capas.df)
modelo <- step(glm(ID/wt ~ bio1 + bio6 + bio12 + I(bio1^2) + I(bio6^2) + I(bio12^2),
data = capas.df, weights = wt,
family = poisson()))
pred.modelo <- predict(modelo)
pred.r <- rasterFromXYZ(data.frame(capas.df[, c("x", "y")], pred.r))
pred.r <- rasterFromXYZ(data.frame(capas.df[, c("x", "y")], pred.modelo))
plot(pred.r)
pred.modelo <- exp(predict(modelo))
pred.r <- rasterFromXYZ(data.frame(capas.df[, c("x", "y")], pred.modelo))
plot(pred.r)
fav.pres <- extract(brad.sp, pred.r)
fav.pres <- extract(pred.r, brad.sp)
umbral <- quantile(fav.pres, 0.95)
umbral
plot(fav.pres > fav.pres)
plot(pred.r > fav.pres)
fav.pres
plot(pred.r > umbral)
umbral <- quantile(fav.pres, 0.05)
plot(pred.r > umbral)
points(brad.sp)
plot(pred.r > umbral); points(brad.sp)
plot(pred.r > umbral); points(brad.sp)
plot(pred.r > umbral); points(brad.sp)
paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
brad.f <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
brad.p <- read.csv(brad.f)
head(brad.p)
brad.sp <- brad.p
coordinates(brad.sp) <- ~ lon+lat
library(dismo); library(raster); library(rgdal); library(maptools)
coordinates(brad.sp) <- ~ lon+lat
data("wrld_simpl"); plot(wrld_simpl)
data("wrld_simpl"); plot(wrld_simpl)
crs(brad.sp) <- crs(wrld_simpl)
capas.f <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''), pattern='grd', full.names=TRUE )
capas.f
capas.f <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''), pattern='grd', full.names=TRUE )
capas.r <- stack(capas.f)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
width = 10
buf <- rgeos::gBuffer(brad.sp, byid = F, width = 10)
plot(buf, add = T)
capas.rm <- crop(mask(capas.r, buf), extent(buf))
plot(capas.rm[[1]])
points(brad.sp)
png("Tutorial-SDM/Pares.png", width = 3000, height = 3000)
pairs(capas.rm)
dev.off()
library(dismo); library(raster); library(rgdal); library(maptools)
############# Preparación de datos
# Puntos de presencia
brad.f <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
brad.p <- read.csv(brad.f)
brad.sp <- brad.p
coordinates(brad.sp) <- ~ lon+lat
data("wrld_simpl"); plot(wrld_simpl)
crs(brad.sp) <- crs(wrld_simpl)
#Capas raster
capas.f <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''), pattern='grd', full.names=TRUE )
capas.r <- stack(capas.f)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.sp)
buf <- rgeos::gBuffer(brad.sp, byid = F, width = 10)
par(mar = c(1,1,1,1))
plot(capas.r[[1]]); points(brad.p$lon, brad.p$lat)
plot(buf, add = T)
capas.rm <- crop(mask(capas.r, buf), extent(buf))
plot(capas.rm[[1]])
points(brad.sp)
pres.r <- rasterize(brad.sp, capas.rm[[1]], fun = "count")
pres.r
plot(pres.r)
pres.r[[1]][is.na(pres.r[[1]][])] <- 0
pres.r <- mask(pres.r[[1]], capas.rm[[1]])
plot(pres.r)
capas.rm <- addLayer(capas.rm, pres.r)
capas.df <- data.frame(rasterToPoints(capas.rm))
head(capas.df)
nrow(capas.df)
wt <- rep(1.0E-6, nrow(capas.df))
wt
wt[capas.df$ID == 0] = length(wt)/sum(capas.df$ID == 0)
capas.df$ID == 0
wt[capas.df$ID == 0] = length(wt)/sum(capas.df$ID == 0)
modelo <- glm(ID/wt ~ bio1 + bio12 + bio7 + I(bio1^2) + I(bio12^2) + I(bio7^2),
data = capas.df, weights = wt,
family = poisson())
summary(modelo)
modelo.1 <- glm(ID/wt ~ bio1 + bio16 + bio17 + bio7 +
I(bio1^2) + I(bio16^2)+ I(bio17^2) + I(bio7^2),
data = capas.df, weights = wt,
family = poisson())
summary(modelo.1)
AIC(modelo)
AIC(modelo.1)
mod.step <- step(modelo.1)
summary(mod.step)
pred.modelo <- exp(predict(modelo))
pred.modelo
pred.r <- rasterFromXYZ(data.frame(capas.df[, c("x", "y")], pred.modelo))
plot(pred.r)
points(brad.sp)
plot(pred.r)
points(brad.sp, pch = 20, cex = 0.5)
plot(pred.r)
points(brad.sp, pch = 20, cex = 0.1)
fav.pres <- extract(pred.r, brad.sp)
umbral <- quantile(fav.pres, 0.05)
umbral
plot(pred.r > umbral); points(brad.sp)
pred.modelo <- exp(predict(mod.step))
pred.r <- rasterFromXYZ(data.frame(capas.df[, c("x", "y")], pred.modelo))
plot(pred.r)
points(brad.sp, pch = 20, cex = 0.1)
fav.pres <- extract(pred.r, brad.sp)
umbral <- quantile(fav.pres, 0.05)
plot(pred.r > umbral); points(brad.sp)
